// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Milofow\Repo\API-Gateway\pkg\authz\pb\authz_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	pb "github.com/Portfolio-Advanced-software/API-Gateway/pkg/authz/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthzServiceClient is a mock of AuthzServiceClient interface.
type MockAuthzServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzServiceClientMockRecorder
}

// MockAuthzServiceClientMockRecorder is the mock recorder for MockAuthzServiceClient.
type MockAuthzServiceClientMockRecorder struct {
	mock *MockAuthzServiceClient
}

// NewMockAuthzServiceClient creates a new mock instance.
func NewMockAuthzServiceClient(ctrl *gomock.Controller) *MockAuthzServiceClient {
	mock := &MockAuthzServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthzServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzServiceClient) EXPECT() *MockAuthzServiceClientMockRecorder {
	return m.recorder
}

// VerifyRole mocks base method.
func (m *MockAuthzServiceClient) VerifyRole(ctx context.Context, in *pb.VerifyRoleRequest, opts ...grpc.CallOption) (*pb.VerifyRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyRole", varargs...)
	ret0, _ := ret[0].(*pb.VerifyRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRole indicates an expected call of VerifyRole.
func (mr *MockAuthzServiceClientMockRecorder) VerifyRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRole", reflect.TypeOf((*MockAuthzServiceClient)(nil).VerifyRole), varargs...)
}

// MockAuthzServiceServer is a mock of AuthzServiceServer interface.
type MockAuthzServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzServiceServerMockRecorder
}

// MockAuthzServiceServerMockRecorder is the mock recorder for MockAuthzServiceServer.
type MockAuthzServiceServerMockRecorder struct {
	mock *MockAuthzServiceServer
}

// NewMockAuthzServiceServer creates a new mock instance.
func NewMockAuthzServiceServer(ctrl *gomock.Controller) *MockAuthzServiceServer {
	mock := &MockAuthzServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthzServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzServiceServer) EXPECT() *MockAuthzServiceServerMockRecorder {
	return m.recorder
}

// VerifyRole mocks base method.
func (m *MockAuthzServiceServer) VerifyRole(arg0 context.Context, arg1 *pb.VerifyRoleRequest) (*pb.VerifyRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRole", arg0, arg1)
	ret0, _ := ret[0].(*pb.VerifyRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRole indicates an expected call of VerifyRole.
func (mr *MockAuthzServiceServerMockRecorder) VerifyRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRole", reflect.TypeOf((*MockAuthzServiceServer)(nil).VerifyRole), arg0, arg1)
}

// mustEmbedUnimplementedAuthzServiceServer mocks base method.
func (m *MockAuthzServiceServer) mustEmbedUnimplementedAuthzServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthzServiceServer")
}

// mustEmbedUnimplementedAuthzServiceServer indicates an expected call of mustEmbedUnimplementedAuthzServiceServer.
func (mr *MockAuthzServiceServerMockRecorder) mustEmbedUnimplementedAuthzServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthzServiceServer", reflect.TypeOf((*MockAuthzServiceServer)(nil).mustEmbedUnimplementedAuthzServiceServer))
}

// MockUnsafeAuthzServiceServer is a mock of UnsafeAuthzServiceServer interface.
type MockUnsafeAuthzServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthzServiceServerMockRecorder
}

// MockUnsafeAuthzServiceServerMockRecorder is the mock recorder for MockUnsafeAuthzServiceServer.
type MockUnsafeAuthzServiceServerMockRecorder struct {
	mock *MockUnsafeAuthzServiceServer
}

// NewMockUnsafeAuthzServiceServer creates a new mock instance.
func NewMockUnsafeAuthzServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthzServiceServer {
	mock := &MockUnsafeAuthzServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthzServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthzServiceServer) EXPECT() *MockUnsafeAuthzServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthzServiceServer mocks base method.
func (m *MockUnsafeAuthzServiceServer) mustEmbedUnimplementedAuthzServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthzServiceServer")
}

// mustEmbedUnimplementedAuthzServiceServer indicates an expected call of mustEmbedUnimplementedAuthzServiceServer.
func (mr *MockUnsafeAuthzServiceServerMockRecorder) mustEmbedUnimplementedAuthzServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthzServiceServer", reflect.TypeOf((*MockUnsafeAuthzServiceServer)(nil).mustEmbedUnimplementedAuthzServiceServer))
}
