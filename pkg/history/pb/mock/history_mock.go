// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/Milofow/Repo/API-Gateway/pkg/history/pb/history_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	pb "github.com/Portfolio-Advanced-software/API-Gateway/pkg/history/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockHistoryServiceClient is a mock of HistoryServiceClient interface.
type MockHistoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryServiceClientMockRecorder
}

// MockHistoryServiceClientMockRecorder is the mock recorder for MockHistoryServiceClient.
type MockHistoryServiceClientMockRecorder struct {
	mock *MockHistoryServiceClient
}

// NewMockHistoryServiceClient creates a new mock instance.
func NewMockHistoryServiceClient(ctrl *gomock.Controller) *MockHistoryServiceClient {
	mock := &MockHistoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockHistoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryServiceClient) EXPECT() *MockHistoryServiceClientMockRecorder {
	return m.recorder
}

// CreateHistory mocks base method.
func (m *MockHistoryServiceClient) CreateHistory(ctx context.Context, in *pb.CreateHistoryReq, opts ...grpc.CallOption) (*pb.CreateHistoryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHistory", varargs...)
	ret0, _ := ret[0].(*pb.CreateHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHistory indicates an expected call of CreateHistory.
func (mr *MockHistoryServiceClientMockRecorder) CreateHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHistory", reflect.TypeOf((*MockHistoryServiceClient)(nil).CreateHistory), varargs...)
}

// DeleteHistory mocks base method.
func (m *MockHistoryServiceClient) DeleteHistory(ctx context.Context, in *pb.DeleteHistoryReq, opts ...grpc.CallOption) (*pb.DeleteHistoryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHistory", varargs...)
	ret0, _ := ret[0].(*pb.DeleteHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHistory indicates an expected call of DeleteHistory.
func (mr *MockHistoryServiceClientMockRecorder) DeleteHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistory", reflect.TypeOf((*MockHistoryServiceClient)(nil).DeleteHistory), varargs...)
}

// ListHistories mocks base method.
func (m *MockHistoryServiceClient) ListHistories(ctx context.Context, in *pb.ListHistoriesReq, opts ...grpc.CallOption) (pb.HistoryService_ListHistoriesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHistories", varargs...)
	ret0, _ := ret[0].(pb.HistoryService_ListHistoriesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistories indicates an expected call of ListHistories.
func (mr *MockHistoryServiceClientMockRecorder) ListHistories(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistories", reflect.TypeOf((*MockHistoryServiceClient)(nil).ListHistories), varargs...)
}

// ReadHistory mocks base method.
func (m *MockHistoryServiceClient) ReadHistory(ctx context.Context, in *pb.ReadHistoryReq, opts ...grpc.CallOption) (*pb.ReadHistoryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadHistory", varargs...)
	ret0, _ := ret[0].(*pb.ReadHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHistory indicates an expected call of ReadHistory.
func (mr *MockHistoryServiceClientMockRecorder) ReadHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHistory", reflect.TypeOf((*MockHistoryServiceClient)(nil).ReadHistory), varargs...)
}

// UpdateHistory mocks base method.
func (m *MockHistoryServiceClient) UpdateHistory(ctx context.Context, in *pb.UpdateHistoryReq, opts ...grpc.CallOption) (*pb.UpdateHistoryRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHistory", varargs...)
	ret0, _ := ret[0].(*pb.UpdateHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHistory indicates an expected call of UpdateHistory.
func (mr *MockHistoryServiceClientMockRecorder) UpdateHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistory", reflect.TypeOf((*MockHistoryServiceClient)(nil).UpdateHistory), varargs...)
}

// MockHistoryService_ListHistoriesClient is a mock of HistoryService_ListHistoriesClient interface.
type MockHistoryService_ListHistoriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryService_ListHistoriesClientMockRecorder
}

// MockHistoryService_ListHistoriesClientMockRecorder is the mock recorder for MockHistoryService_ListHistoriesClient.
type MockHistoryService_ListHistoriesClientMockRecorder struct {
	mock *MockHistoryService_ListHistoriesClient
}

// NewMockHistoryService_ListHistoriesClient creates a new mock instance.
func NewMockHistoryService_ListHistoriesClient(ctrl *gomock.Controller) *MockHistoryService_ListHistoriesClient {
	mock := &MockHistoryService_ListHistoriesClient{ctrl: ctrl}
	mock.recorder = &MockHistoryService_ListHistoriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryService_ListHistoriesClient) EXPECT() *MockHistoryService_ListHistoriesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockHistoryService_ListHistoriesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockHistoryService_ListHistoriesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockHistoryService_ListHistoriesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockHistoryService_ListHistoriesClient) Recv() (*pb.ListHistoriesRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ListHistoriesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockHistoryService_ListHistoriesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockHistoryService_ListHistoriesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockHistoryService_ListHistoriesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockHistoryService_ListHistoriesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockHistoryService_ListHistoriesClient)(nil).Trailer))
}

// MockHistoryServiceServer is a mock of HistoryServiceServer interface.
type MockHistoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryServiceServerMockRecorder
}

// MockHistoryServiceServerMockRecorder is the mock recorder for MockHistoryServiceServer.
type MockHistoryServiceServerMockRecorder struct {
	mock *MockHistoryServiceServer
}

// NewMockHistoryServiceServer creates a new mock instance.
func NewMockHistoryServiceServer(ctrl *gomock.Controller) *MockHistoryServiceServer {
	mock := &MockHistoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockHistoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryServiceServer) EXPECT() *MockHistoryServiceServerMockRecorder {
	return m.recorder
}

// CreateHistory mocks base method.
func (m *MockHistoryServiceServer) CreateHistory(arg0 context.Context, arg1 *pb.CreateHistoryReq) (*pb.CreateHistoryRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHistory", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHistory indicates an expected call of CreateHistory.
func (mr *MockHistoryServiceServerMockRecorder) CreateHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHistory", reflect.TypeOf((*MockHistoryServiceServer)(nil).CreateHistory), arg0, arg1)
}

// DeleteHistory mocks base method.
func (m *MockHistoryServiceServer) DeleteHistory(arg0 context.Context, arg1 *pb.DeleteHistoryReq) (*pb.DeleteHistoryRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHistory", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHistory indicates an expected call of DeleteHistory.
func (mr *MockHistoryServiceServerMockRecorder) DeleteHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHistory", reflect.TypeOf((*MockHistoryServiceServer)(nil).DeleteHistory), arg0, arg1)
}

// ListHistories mocks base method.
func (m *MockHistoryServiceServer) ListHistories(arg0 *pb.ListHistoriesReq, arg1 pb.HistoryService_ListHistoriesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHistories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHistories indicates an expected call of ListHistories.
func (mr *MockHistoryServiceServerMockRecorder) ListHistories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistories", reflect.TypeOf((*MockHistoryServiceServer)(nil).ListHistories), arg0, arg1)
}

// ReadHistory mocks base method.
func (m *MockHistoryServiceServer) ReadHistory(arg0 context.Context, arg1 *pb.ReadHistoryReq) (*pb.ReadHistoryRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHistory", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHistory indicates an expected call of ReadHistory.
func (mr *MockHistoryServiceServerMockRecorder) ReadHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHistory", reflect.TypeOf((*MockHistoryServiceServer)(nil).ReadHistory), arg0, arg1)
}

// UpdateHistory mocks base method.
func (m *MockHistoryServiceServer) UpdateHistory(arg0 context.Context, arg1 *pb.UpdateHistoryReq) (*pb.UpdateHistoryRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistory", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateHistoryRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHistory indicates an expected call of UpdateHistory.
func (mr *MockHistoryServiceServerMockRecorder) UpdateHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistory", reflect.TypeOf((*MockHistoryServiceServer)(nil).UpdateHistory), arg0, arg1)
}

// mustEmbedUnimplementedHistoryServiceServer mocks base method.
func (m *MockHistoryServiceServer) mustEmbedUnimplementedHistoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHistoryServiceServer")
}

// mustEmbedUnimplementedHistoryServiceServer indicates an expected call of mustEmbedUnimplementedHistoryServiceServer.
func (mr *MockHistoryServiceServerMockRecorder) mustEmbedUnimplementedHistoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHistoryServiceServer", reflect.TypeOf((*MockHistoryServiceServer)(nil).mustEmbedUnimplementedHistoryServiceServer))
}

// MockUnsafeHistoryServiceServer is a mock of UnsafeHistoryServiceServer interface.
type MockUnsafeHistoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHistoryServiceServerMockRecorder
}

// MockUnsafeHistoryServiceServerMockRecorder is the mock recorder for MockUnsafeHistoryServiceServer.
type MockUnsafeHistoryServiceServerMockRecorder struct {
	mock *MockUnsafeHistoryServiceServer
}

// NewMockUnsafeHistoryServiceServer creates a new mock instance.
func NewMockUnsafeHistoryServiceServer(ctrl *gomock.Controller) *MockUnsafeHistoryServiceServer {
	mock := &MockUnsafeHistoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHistoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHistoryServiceServer) EXPECT() *MockUnsafeHistoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHistoryServiceServer mocks base method.
func (m *MockUnsafeHistoryServiceServer) mustEmbedUnimplementedHistoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHistoryServiceServer")
}

// mustEmbedUnimplementedHistoryServiceServer indicates an expected call of mustEmbedUnimplementedHistoryServiceServer.
func (mr *MockUnsafeHistoryServiceServerMockRecorder) mustEmbedUnimplementedHistoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHistoryServiceServer", reflect.TypeOf((*MockUnsafeHistoryServiceServer)(nil).mustEmbedUnimplementedHistoryServiceServer))
}

// MockHistoryService_ListHistoriesServer is a mock of HistoryService_ListHistoriesServer interface.
type MockHistoryService_ListHistoriesServer struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryService_ListHistoriesServerMockRecorder
}

// MockHistoryService_ListHistoriesServerMockRecorder is the mock recorder for MockHistoryService_ListHistoriesServer.
type MockHistoryService_ListHistoriesServerMockRecorder struct {
	mock *MockHistoryService_ListHistoriesServer
}

// NewMockHistoryService_ListHistoriesServer creates a new mock instance.
func NewMockHistoryService_ListHistoriesServer(ctrl *gomock.Controller) *MockHistoryService_ListHistoriesServer {
	mock := &MockHistoryService_ListHistoriesServer{ctrl: ctrl}
	mock.recorder = &MockHistoryService_ListHistoriesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryService_ListHistoriesServer) EXPECT() *MockHistoryService_ListHistoriesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockHistoryService_ListHistoriesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockHistoryService_ListHistoriesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockHistoryService_ListHistoriesServer) Send(arg0 *pb.ListHistoriesRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockHistoryService_ListHistoriesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockHistoryService_ListHistoriesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockHistoryService_ListHistoriesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockHistoryService_ListHistoriesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockHistoryService_ListHistoriesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockHistoryService_ListHistoriesServer)(nil).SetTrailer), arg0)
}
