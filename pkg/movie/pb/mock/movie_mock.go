// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Milofow\Repo\API-Gateway\pkg\movie\pb\movie_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	pb "github.com/Portfolio-Advanced-software/API-Gateway/pkg/movie/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockMovieServiceClient is a mock of MovieServiceClient interface.
type MockMovieServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceClientMockRecorder
}

// MockMovieServiceClientMockRecorder is the mock recorder for MockMovieServiceClient.
type MockMovieServiceClientMockRecorder struct {
	mock *MockMovieServiceClient
}

// NewMockMovieServiceClient creates a new mock instance.
func NewMockMovieServiceClient(ctrl *gomock.Controller) *MockMovieServiceClient {
	mock := &MockMovieServiceClient{ctrl: ctrl}
	mock.recorder = &MockMovieServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceClient) EXPECT() *MockMovieServiceClientMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieServiceClient) CreateMovie(ctx context.Context, in *pb.CreateMovieReq, opts ...grpc.CallOption) (*pb.CreateMovieRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMovie", varargs...)
	ret0, _ := ret[0].(*pb.CreateMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieServiceClientMockRecorder) CreateMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).CreateMovie), varargs...)
}

// DeleteMovie mocks base method.
func (m *MockMovieServiceClient) DeleteMovie(ctx context.Context, in *pb.DeleteMovieReq, opts ...grpc.CallOption) (*pb.DeleteMovieRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMovie", varargs...)
	ret0, _ := ret[0].(*pb.DeleteMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieServiceClientMockRecorder) DeleteMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).DeleteMovie), varargs...)
}

// ListMovies mocks base method.
func (m *MockMovieServiceClient) ListMovies(ctx context.Context, in *pb.ListMoviesReq, opts ...grpc.CallOption) (pb.MovieService_ListMoviesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMovies", varargs...)
	ret0, _ := ret[0].(pb.MovieService_ListMoviesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockMovieServiceClientMockRecorder) ListMovies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockMovieServiceClient)(nil).ListMovies), varargs...)
}

// ReadMovie mocks base method.
func (m *MockMovieServiceClient) ReadMovie(ctx context.Context, in *pb.ReadMovieReq, opts ...grpc.CallOption) (*pb.ReadMovieRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMovie", varargs...)
	ret0, _ := ret[0].(*pb.ReadMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMovie indicates an expected call of ReadMovie.
func (mr *MockMovieServiceClientMockRecorder) ReadMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).ReadMovie), varargs...)
}

// UpdateMovie mocks base method.
func (m *MockMovieServiceClient) UpdateMovie(ctx context.Context, in *pb.UpdateMovieReq, opts ...grpc.CallOption) (*pb.UpdateMovieRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMovie", varargs...)
	ret0, _ := ret[0].(*pb.UpdateMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieServiceClientMockRecorder) UpdateMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).UpdateMovie), varargs...)
}

// MockMovieService_ListMoviesClient is a mock of MovieService_ListMoviesClient interface.
type MockMovieService_ListMoviesClient struct {
	ctrl     *gomock.Controller
	recorder *MockMovieService_ListMoviesClientMockRecorder
}

// MockMovieService_ListMoviesClientMockRecorder is the mock recorder for MockMovieService_ListMoviesClient.
type MockMovieService_ListMoviesClientMockRecorder struct {
	mock *MockMovieService_ListMoviesClient
}

// NewMockMovieService_ListMoviesClient creates a new mock instance.
func NewMockMovieService_ListMoviesClient(ctrl *gomock.Controller) *MockMovieService_ListMoviesClient {
	mock := &MockMovieService_ListMoviesClient{ctrl: ctrl}
	mock.recorder = &MockMovieService_ListMoviesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService_ListMoviesClient) EXPECT() *MockMovieService_ListMoviesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMovieService_ListMoviesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMovieService_ListMoviesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMovieService_ListMoviesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMovieService_ListMoviesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMovieService_ListMoviesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMovieService_ListMoviesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMovieService_ListMoviesClient) Recv() (*pb.ListMoviesRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ListMoviesRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMovieService_ListMoviesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMovieService_ListMoviesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMovieService_ListMoviesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMovieService_ListMoviesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMovieService_ListMoviesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMovieService_ListMoviesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMovieService_ListMoviesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMovieService_ListMoviesClient)(nil).Trailer))
}

// MockMovieServiceServer is a mock of MovieServiceServer interface.
type MockMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceServerMockRecorder
}

// MockMovieServiceServerMockRecorder is the mock recorder for MockMovieServiceServer.
type MockMovieServiceServerMockRecorder struct {
	mock *MockMovieServiceServer
}

// NewMockMovieServiceServer creates a new mock instance.
func NewMockMovieServiceServer(ctrl *gomock.Controller) *MockMovieServiceServer {
	mock := &MockMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceServer) EXPECT() *MockMovieServiceServerMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieServiceServer) CreateMovie(arg0 context.Context, arg1 *pb.CreateMovieReq) (*pb.CreateMovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieServiceServerMockRecorder) CreateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).CreateMovie), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockMovieServiceServer) DeleteMovie(arg0 context.Context, arg1 *pb.DeleteMovieReq) (*pb.DeleteMovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieServiceServerMockRecorder) DeleteMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).DeleteMovie), arg0, arg1)
}

// ListMovies mocks base method.
func (m *MockMovieServiceServer) ListMovies(arg0 *pb.ListMoviesReq, arg1 pb.MovieService_ListMoviesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockMovieServiceServerMockRecorder) ListMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockMovieServiceServer)(nil).ListMovies), arg0, arg1)
}

// ReadMovie mocks base method.
func (m *MockMovieServiceServer) ReadMovie(arg0 context.Context, arg1 *pb.ReadMovieReq) (*pb.ReadMovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMovie", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMovie indicates an expected call of ReadMovie.
func (mr *MockMovieServiceServerMockRecorder) ReadMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).ReadMovie), arg0, arg1)
}

// UpdateMovie mocks base method.
func (m *MockMovieServiceServer) UpdateMovie(arg0 context.Context, arg1 *pb.UpdateMovieReq) (*pb.UpdateMovieRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateMovieRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieServiceServerMockRecorder) UpdateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).UpdateMovie), arg0, arg1)
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}

// MockUnsafeMovieServiceServer is a mock of UnsafeMovieServiceServer interface.
type MockUnsafeMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMovieServiceServerMockRecorder
}

// MockUnsafeMovieServiceServerMockRecorder is the mock recorder for MockUnsafeMovieServiceServer.
type MockUnsafeMovieServiceServerMockRecorder struct {
	mock *MockUnsafeMovieServiceServer
}

// NewMockUnsafeMovieServiceServer creates a new mock instance.
func NewMockUnsafeMovieServiceServer(ctrl *gomock.Controller) *MockUnsafeMovieServiceServer {
	mock := &MockUnsafeMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMovieServiceServer) EXPECT() *MockUnsafeMovieServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockUnsafeMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockUnsafeMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockUnsafeMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}

// MockMovieService_ListMoviesServer is a mock of MovieService_ListMoviesServer interface.
type MockMovieService_ListMoviesServer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieService_ListMoviesServerMockRecorder
}

// MockMovieService_ListMoviesServerMockRecorder is the mock recorder for MockMovieService_ListMoviesServer.
type MockMovieService_ListMoviesServerMockRecorder struct {
	mock *MockMovieService_ListMoviesServer
}

// NewMockMovieService_ListMoviesServer creates a new mock instance.
func NewMockMovieService_ListMoviesServer(ctrl *gomock.Controller) *MockMovieService_ListMoviesServer {
	mock := &MockMovieService_ListMoviesServer{ctrl: ctrl}
	mock.recorder = &MockMovieService_ListMoviesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService_ListMoviesServer) EXPECT() *MockMovieService_ListMoviesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMovieService_ListMoviesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMovieService_ListMoviesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMovieService_ListMoviesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMovieService_ListMoviesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMovieService_ListMoviesServer) Send(arg0 *pb.ListMoviesRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMovieService_ListMoviesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMovieService_ListMoviesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMovieService_ListMoviesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMovieService_ListMoviesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMovieService_ListMoviesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMovieService_ListMoviesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMovieService_ListMoviesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMovieService_ListMoviesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMovieService_ListMoviesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMovieService_ListMoviesServer)(nil).SetTrailer), arg0)
}
